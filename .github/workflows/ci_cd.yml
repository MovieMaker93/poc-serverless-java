# This is CI/CD pipeline to deploy my lambda function to AWS

name: CI/CD pipeline to AWS 
env:
  STAGE: dev
  PACKAGE_NAME: taxes-exercise

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a two jobs: "build" and "deploy"
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build and Test
    # The build process setup 
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      # Cache maven package
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
         path: ~/.m2
         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
         restore-keys: ${{ runner.os }}-m2
      # Compile without the test 
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      # Test the code
      - name: Maven Test Verify
        run: mvn -B clean verify
        run: mkdir dev && cp target/*.jar dev
      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.PACKAGE_NAME}}-${{env.STAGE}}
          path: dev

  deploy:
    name: Deploy to AWS with Serverless
    runs-on: ubuntu-latest 
    needs: [build_and_test]

    steps:
    - uses: actions/checkout@v2
    #- name: Set up JDK 8
    #  uses: actions/setup-java@v2
     # with:
     #   java-version: '8'
      #  distribution: 'adopt'
    #- run: mvn -B clean package -DskipTests
    - uses: actions/download-artifact@v2
      with:
       name: ${{env.PACKAGE_NAME}}-${{env.STAGE}}
       path: target
    - name: serverless deploy
      uses: serverless/github-action@master
      with:
        args: deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

